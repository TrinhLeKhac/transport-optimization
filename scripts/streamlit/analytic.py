import datetime
from scripts.streamlit.streamlit_helper import *
import streamlit as st
import plotly.express as px


def draw_n_zns_message(filter_zns_df):

    viz_df = filter_zns_df['carrier'].value_counts().reset_index()

    fig = px.pie(viz_df, values='count', names='carrier', height=300)
    fig.update_traces(textposition='inside', textinfo='label+value')
    fig.update_layout(showlegend=False)
    fig.update_layout(
        {
            "plot_bgcolor": "rgba(0, 0, 0, 0)",  # make the background transparent
            "margin": {"l": 0, "r": 0, "t": 0, "b": 0}
        }
    )
    return fig


def draw_n_zns_comment(filter_zns_df):

    viz_df = filter_zns_df['comment'].value_counts().reset_index()
    fig = px.pie(viz_df, values='count', names='comment', height=300)
    fig.update_traces(textposition='inside', textinfo='value')
    fig.update_layout(
        {
            "plot_bgcolor": "rgba(0, 0, 0, 0)",  # make the background transparent
            "margin": {"l": 0, "r": 0, "t": 15, "b": 0}
        }
    )
    return fig


def draw_order(filter_order_df):
    viz_df = filter_order_df['carrier'].value_counts().reset_index()

    fig = px.pie(viz_df, values='count', names='carrier')
    fig.update_traces(textposition='inside', textinfo='label+value')
    fig.update_layout(showlegend=False)
    return fig


def create_analytic_tab(run_date_str):
    interactive = st.container()
    with interactive:

        # 1. Th·ªëng k√™ tuy·∫øn ∆∞u ti√™n

        # 1.1. Load data
        meta_priority_df = st_get_data_meta_priority_route()
        raw_priority_df, dup_priority_df = st_get_data_priority_route()
        raw_priority_details_df, dup_priority_details_df = st_get_data_priority_route_details()

        # 1.2. Th√¥ng tin tuy·∫øn ∆∞u ti√™n
        st.info(
            f"""
                    **Th·ªëng k√™ d·ªØ li·ªáu :red[Tuy·∫øn ∆∞u ti√™n]**   
                    * Th√¥ng tin:  
                    üëâ Kho·∫£ng th·ªùi gian ƒë√°nh gi√°: :red[**1 th√°ng**], :red[**2 th√°ng**], :red[**3 th√°ng**], :red[**6 th√°ng**], :red[**12 th√°ng**]  
                    üëâ Ch·ªâ x√©t ƒë∆°n NVC l·∫•y th√†nh c√¥ng :red[**tr∆∞·ªõc 18:00**] ng√†y h√¥m tr∆∞·ªõc (:red[**picked_at**])  
                    üëâ Th·ªùi gian shipper l·∫•y t·ª´ kho ·ªü t·ªânh ƒëi giao :red[**tr∆∞·ªõc 09:00**] ng√†y h√¥m sau (:red[**last_delivering_at**])  
                    üëâ T·ªâ l·ªá t√≠nh ƒëang l·∫•y ·ªü m·ª©c top :red[**20%**]    
                """
        )

        # 1.3 T·ªâ l·ªá t√≠nh
        meta_div, _, _ = st.columns(3)
        meta_div.selectbox(
            ":blue[**Ch·ªçn t·ªâ l·ªá t√≠nh**]",
            options=sorted(meta_priority_df['type'].unique().tolist(), key=vietnamese_sort_key),
            key='meta_priority_type',
        )

        filter_priority_meta_df = meta_priority_df.loc[
            (meta_priority_df['type'] == st.session_state['meta_priority_type'])
            ][[ 'order_type', 'rounded_delta_hour', 'idea_delta_hour']]

        st.dataframe(
            filter_priority_meta_df,
            column_config={
                'order_type': "H√¨nh th·ª©c v·∫≠n chuy·ªÉn",
                'rounded_delta_hour': "Th·ªùi gian v·∫≠n chuy·ªÉn (last_delivering_at - picked_at)(h)",
                'idea_delta_hour': "Th√≤i gian v·∫≠n chuy·ªÉn (t√≠nh x√©t tuy·∫øn ∆∞u ti√™n)",
            },
            hide_index=True,
        )
        st.divider()

        # 1.4 Th√¥ng tin th·ªëng k√™
        # Checkbox filter tuy·∫øn ∆∞u ti√™n c√≥ nhi·ªÅu h∆°n 1 NVC
        find_duplicates = st.checkbox("Check tuy·∫øn ∆∞u ti√™n c√≥ nhi·ªÅu h∆°n 1 NVC")
        if find_duplicates:
            priority_df = dup_priority_df
            priority_details_df = dup_priority_details_df
        else:
            priority_df = raw_priority_df
            priority_details_df = raw_priority_details_df

        # 1.4.1 Select box ch·ªçn th√¥ng tin th·ªëng k√™
        priority_div1, priority_div2, priority_div3 = st.columns(3)

        priority_div1.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë G·ª≠i**]",
            options=sorted(priority_df['sender_province'].unique().tolist(), key=vietnamese_sort_key),
            key='priority_sender_province',
        )
        priority_div2.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán G·ª≠i**]",
            options=sorted(priority_df.loc[
                               (priority_df['sender_province'] == st.session_state[
                                   'priority_sender_province'])
                           ]['sender_district'].unique().tolist(), key=vietnamese_sort_key),
            key='priority_sender_district',
        )
        priority_div3.selectbox(
            ":blue[**Ch·ªçn Lo·∫°i V·∫≠n Chuy·ªÉn**]",
            options=sorted(priority_df.loc[
                               (priority_df['sender_province'] == st.session_state[
                                   'priority_sender_province'])
                               & (priority_df['sender_district'] == st.session_state[
                                   'priority_sender_district'])
                               ]['order_type'].unique().tolist(), key=vietnamese_sort_key),
            key='priority_order_type',
        )

        priority_div4, priority_div5, _ = st.columns(3)

        priority_div4.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë Nh·∫≠n**]",
            options=sorted(priority_df.loc[
                               (priority_df['sender_province'] == st.session_state[
                                   'priority_sender_province'])
                               & (priority_df['sender_district'] == st.session_state[
                                   'priority_sender_district'])
                               & (priority_df['order_type'] == st.session_state[
                                   'priority_order_type'])
                               ]['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='priority_receiver_province',
        )
        priority_div5.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán Nh·∫≠n**]",
            options=sorted(priority_df.loc[
                               (priority_df['sender_province'] == st.session_state[
                                   'priority_sender_province'])
                               & (priority_df['sender_district'] == st.session_state[
                                   'priority_sender_district'])
                               & (priority_df['order_type'] == st.session_state[
                                   'priority_order_type'])
                               & (priority_df['receiver_province'] == st.session_state[
                                   'priority_receiver_province'])
                               ]['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='priority_receiver_district',
        )

        # 1.4.2 Th√¥ng tin th·ªëng k√™
        filter_priority_df = priority_df.loc[
             (priority_df['sender_province'] == st.session_state['priority_sender_province'])
             & (priority_df['sender_district'] == st.session_state['priority_sender_district'])
             & (priority_df['order_type'] == st.session_state['priority_order_type'])
             & (priority_df['receiver_province'] == st.session_state['priority_receiver_province'])
             & (priority_df['receiver_district'] == st.session_state['priority_receiver_district'])
            ]

        filter_priority_df = filter_priority_df[[
            'carrier', 'preferred_carrier',
            'sender_province', 'sender_district', 'receiver_province', 'receiver_district',
            'order_type',
            'orders_in_1_month', 'ndays_in_1_month',
            'orders_in_2_month', 'ndays_in_2_month',
        ]]
        st_p1, _, _, _, _ = st.columns(5)

        # 1.4.3 Hi·ªÉn th·ªã th·ªëng k√™
        st_p1.info(":red[**Th·ªëng k√™**]")
        st.dataframe(
            filter_priority_df,
            column_config={
                "carrier": "Nh√† v·∫≠n chuy·ªÉn",
                "preferred_carrier": "∆Øu ti√™n",
                'sender_province': "T·ªânh th√†nh g·ª≠i",
                'sender_district': "Qu·∫≠n huy·ªán g·ª≠i",
                'receiver_province': "T·ªânh th√†nh nh·∫≠n",
                'receiver_district': "Qu·∫≠n huy·ªán nh·∫≠n",
                'order_type': "H√¨nh th·ª©c v·∫≠n chuy·ªÉn",
                'orders_in_1_month': "ƒê∆°n (1 th√°ng)",
                'ndays_in_1_month': 'Ng√†y (1 th√°ng)',
                'orders_in_2_month': "ƒê∆°n (2 th√°ng)",
                'ndays_in_2_month': 'Ng√†y (2 th√°ng)',
            },
            hide_index=True,
        )

        filter_priority_details_df = priority_details_df.loc[
            (priority_details_df['sender_province'] == st.session_state['priority_sender_province'])
            & (priority_details_df['sender_district'] == st.session_state['priority_sender_district'])
            & (priority_details_df['order_type'] == st.session_state['priority_order_type'])
            & (priority_details_df['receiver_province'] == st.session_state['priority_receiver_province'])
            & (priority_details_df['receiver_district'] == st.session_state['priority_receiver_district'])
            ]

        filter_priority_details_df = filter_priority_details_df[[
            'order_code', 'carrier',
            'sender_province', 'sender_district',
            'receiver_province', 'receiver_district',
            'order_status',
            'picked_at', 'last_delivering_at',
        ]]

        # 1.5.3 Th√¥ng tin chi ti·∫øt ƒë·ªÉ hi·ªÉn th·ªã
        st.dataframe(
            filter_priority_details_df,
            column_config={
                "order_code": "M√£ ƒë∆°n h√†ng",
                "carrier": "Nh√† v·∫≠n chuy·ªÉn",
                'sender_province': "T·ªânh th√†nh g·ª≠i",
                'sender_district': "Qu·∫≠n huy·ªán g·ª≠i",
                'receiver_province': "T·ªânh th√†nh nh·∫≠n",
                'receiver_district': "Qu·∫≠n huy·ªán nh·∫≠n",
                'order_status': "Tr·∫°ng th√°i ƒë∆°n h√†ng",
                'picked_at': "Th·ªùi gian shipper NVC l·∫•y h√†ng",
                'last_delivering_at': "Th·ªùi gian shipper giao l·∫•y t·ª´ kho ·ªü t·ªânh ƒëi giao"
            },
            hide_index=True,
        )
        st.divider()

        # 2. Th·ªëng k√™ ZNS
        # 2.1. Load data
        total_zns_df = st_get_data_zns()
        comment_zns_df = total_zns_df[['receiver_province', 'receiver_district', 'carrier', 'comment']].explode(
            column='comment')
        comment_zns_df = comment_zns_df.loc[comment_zns_df['comment'].notna()]

        # 2.2. Th·ªëng k√™ data ZNS
        st.info(
            f"""
            **Th·ªëng k√™ d·ªØ li·ªáu :red[ƒë√°nh gi√° ZNS]**   
            * Th√¥ng tin:  
            üëâ Kho·∫£ng th·ªùi gian ƒë√°nh gi√°: T·ª´ :red[**{total_zns_df['reviewed_at'].min().date()}**] ƒë·∫øn :red[**{total_zns_df['reviewed_at'].max().date()}**]   
            üëâ S·ªë tin nh·∫Øn ZNS theo :red[**Khu v·ª±c**], :red[**S·ªë sao ƒë√°nh gi√°**] v√† :red[**Kho·∫£ng th·ªùi gian**] t√πy ch·ªçn  
            üëâ Comment c·ªßa ng∆∞·ªùi nh·∫≠n theo :red[**Khu v·ª±c**], :red[**Nh√† v·∫≠n chuy·ªÉn**]  
        """
        )

        chart_zns_message, _, chart_zns_comment = st.columns([4, 1, 3])

        # 2.3 ZNS message div
        opt_zns_mess_province, opt_zns_mess_district = chart_zns_message.columns(2)
        opt_zns_mess_province.selectbox(  # multiselect
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë**]",
            options=sorted(total_zns_df['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='zns_province',
        )
        filter_zns_df1 = total_zns_df.loc[
            (total_zns_df['receiver_province'] == st.session_state['zns_province'])
        ]
        opt_zns_mess_district.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán**]",
            options=sorted(filter_zns_df1['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='zns_district',
        )
        opt_zns_mess_star, opt_zns_mess_range_date = chart_zns_message.columns([2, 3])
        filter_zns_df2 = filter_zns_df1.loc[
            (filter_zns_df1['receiver_district'] == st.session_state['zns_district'])
        ]
        opt_zns_mess_star.selectbox(
            ":blue[**Ch·ªçn S·ªë Sao ƒê√°nh Gi√°**]",
            options=sorted(filter_zns_df2['n_stars'].unique().tolist()),
            key='zns_star',
        )
        filter_zns_df3 = filter_zns_df2.loc[
            (filter_zns_df2['n_stars'] == st.session_state['zns_star'])
        ]
        opt_zns_mess_range_date.slider(
            label=":blue[**Ch·ªçn Kho·∫£ng Th·ªùi Gian**]",
            min_value=filter_zns_df3['reviewed_at'].min().date(),
            max_value=filter_zns_df3['reviewed_at'].max().date()+timedelta(days=1),
            step=timedelta(days=1),
            key='zns_range_date',
            value=(filter_zns_df3['reviewed_at'].min().date(), filter_zns_df3['reviewed_at'].max().date())
        )
        filter_zns_df4 = filter_zns_df3.loc[
            (filter_zns_df3['reviewed_at'].dt.date >= st.session_state['zns_range_date'][0])
            & (filter_zns_df3['reviewed_at'].dt.date <= st.session_state['zns_range_date'][1])
        ]
        fig_zns_mess_by_carrier = draw_n_zns_message(filter_zns_df4)

        chart_zns_message.plotly_chart(fig_zns_mess_by_carrier)
        chart_zns_message.info(f'T·ªïng s·ªë ƒë√°nh gi√°: :red[**{len(filter_zns_df4)}**]')

        # ----------------------------------------------------------------------------------------------

        # 2.4 ZNS comment div
        opt_zns_com_province, opt_zns_com_district = chart_zns_comment.columns(2)

        opt_zns_com_province.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë**]",
            options=sorted(comment_zns_df['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='zns_province2',
        )
        filter_comment_zns_df1 = comment_zns_df.loc[
            (comment_zns_df['receiver_province'] == st.session_state['zns_province2'])
        ]
        opt_zns_com_district.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán**]",
            options=sorted(filter_comment_zns_df1['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='zns_district2',
        )
        filter_comment_zns_df2 = filter_comment_zns_df1.loc[
            (filter_comment_zns_df1['receiver_district'] == st.session_state['zns_district2'])
        ]
        chart_zns_comment.selectbox(
            ":blue[**Ch·ªçn Nh√† V·∫≠n Chuy·ªÉn**]",
            options=sorted(filter_comment_zns_df2['carrier'].unique().tolist(), key=vietnamese_sort_key),
            key='zns_carrier',
        )
        filter_comment_zns_df3 = filter_comment_zns_df2.loc[
            (filter_comment_zns_df2['carrier'] == st.session_state['zns_carrier'])
        ]
        fig_zns_com_by_carrier = draw_n_zns_comment(filter_comment_zns_df3)

        chart_zns_comment.plotly_chart(fig_zns_com_by_carrier)
        chart_zns_comment.info(f'T·ªïng s·ªë comment: :red[**{len(filter_comment_zns_df3)}**]')

        st.divider()
        # ----------------------------------------------------------------------------------------------

        # 3. Th·ªëng k√™ ƒë∆°n h√†ng
        # 3.1 Load data
        total_order_df = st_get_data_order()
        ti_le_giao_hang = st_get_ti_le_giao_hang()

        # 3.2 Th·ªëng k√™ data
        st.info(
            f"""
                **Th·ªëng k√™ d·ªØ li·ªáu :red[ƒë∆°n h√†ng]**   
                * Th√¥ng tin:  
                üëâ Kho·∫£ng th·ªùi gian ƒë√°nh gi√°: T·ª´ :red[**{total_order_df['created_at'].min().date()}**] ƒë·∫øn :red[**{total_order_df['created_at'].max().date()}**]   
                üëâ S·ªë ƒë∆°n h√†ng t√≠nh theo :red[**Khu v·ª±c**], :red[**Tr·∫°ng th√°i giao h√†ng**], :red[**Kh·ªëi l∆∞·ª£ng**] v√† :red[**Kho·∫£ng th·ªùi gian**] t√πy ch·ªçn  
                üëâ Th·ªëng k√™ khu v·ª±c :red[**ƒë∆°n t·ªìn ƒë·ªçng**] 
            """
        )

        chart_order, _, chart_stuck = st.columns([8, 1, 7])
        opt_order_sender_province, opt_order_sender_district = chart_order.columns(2)

        opt_order_sender_province.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë Giao**]",
            options=sorted(total_order_df['sender_province'].unique().tolist(), key=vietnamese_sort_key),
            key='order_sender_province',
        )
        filter_order_df1 = total_order_df.loc[
            total_order_df['sender_province'] == st.session_state['order_sender_province']
            ]
        opt_order_sender_district.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán Giao**]",
            options=sorted(filter_order_df1['sender_district'].unique().tolist(), key=vietnamese_sort_key),
            key='order_sender_district',
        )

        opt_order_receiver_province, opt_order_receiver_district = chart_order.columns(2)
        filter_order_df2 = filter_order_df1.loc[
            filter_order_df1['sender_district'] == st.session_state['order_sender_district']
            ]
        opt_order_receiver_province.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë Nh·∫≠n**]",
            options=sorted(filter_order_df2['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='order_receiver_province',
        )
        filter_order_df3 = filter_order_df2.loc[
            filter_order_df2['receiver_province'] == st.session_state['order_receiver_province']
            ]
        opt_order_receiver_district.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán Nh·∫≠n**]",
            options=sorted(filter_order_df3['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='order_receiver_district',
        )
        filter_order_df4 = filter_order_df3.loc[
            filter_order_df3['receiver_district'] == st.session_state['order_receiver_district']
            ]
        options_carrier_status = DF_STATUS_MAPPING.loc[
            DF_STATUS_MAPPING['carrier_status'].isin(filter_order_df4['carrier_status'].unique().tolist())
        ]['status'].unique().tolist()

        opt_carrier_status, opt_weight_range = chart_order.columns(2)
        opt_carrier_status.selectbox(
            ":blue[**Ch·ªçn Tr·∫°ng Th√°i ƒê∆°n H√†ng**]",
            options=sorted(options_carrier_status, key=vietnamese_sort_key),
            key='order_carrier_status',
        )
        filter_order_df5 = filter_order_df4.loc[
            filter_order_df4['carrier_status'].isin(
                DF_STATUS_MAPPING.loc[
                    DF_STATUS_MAPPING['status'] == st.session_state['order_carrier_status']
                    ]['carrier_status'])
        ]
        opt_weight_range.slider(
            label=":blue[**Ch·ªçn Kho·∫£ng Kh·ªëi L∆∞·ª£ng ƒê∆°n**]",
            min_value=int(filter_order_df5['weight'].min() // 100) * 100,
            max_value=int(filter_order_df5['weight'].max() // 100) * 100 + 100,
            step=100,
            key='order_weight_range',
            value=(filter_order_df5['weight'].min(), filter_order_df5['weight'].max())
        )
        filter_order_df6 = filter_order_df5.loc[
            (filter_order_df5['weight'] >= st.session_state['order_weight_range'][0])
            & (filter_order_df5['weight'] <= st.session_state['order_weight_range'][1])
            ]
        try:
            opt_created_at_range, opt_delivery_type = chart_order.columns(2)
            opt_created_at_range.slider(
                label=":blue[**Ch·ªçn Kho·∫£ng Th·ªùi Gian T·∫°o ƒê∆°n (created_at)**]",
                min_value=total_order_df['created_at'].min().date(),
                max_value=total_order_df['created_at'].max().date() + timedelta(days=1),
                step=timedelta(days=1),
                key='order_created_at_range',
                value=(filter_order_df6['created_at'].min().date(), filter_order_df6['created_at'].max().date())
            )
            filter_order_df7 = filter_order_df6.loc[
                (filter_order_df6['created_at'].dt.date >= st.session_state['order_created_at_range'][0])
                & (filter_order_df6['created_at'].dt.date <= st.session_state['order_created_at_range'][1])
                ]

            opt_delivery_type.selectbox(
                ":blue[**Ch·ªçn H√¨nh Th·ª©c G·ª≠i H√†ng**]",
                options=sorted(filter_order_df7['delivery_type'].unique().tolist(), key=vietnamese_sort_key),
                key='order_delivery_type',
            )
            filter_order_df8 = filter_order_df7.loc[
                filter_order_df7['delivery_type'] == st.session_state['order_delivery_type']]
            fig_order_by_carrier = draw_order(filter_order_df8)

            chart_order.plotly_chart(fig_order_by_carrier)
            chart_order.info(f"""
                T·ªïng s·ªë ƒë∆°n: :red[**{len(filter_order_df8)}**]  
                Lo·∫°i v·∫≠n chuy·ªÉn: :red[**{filter_order_df8['order_type'].values[0]}**]  
            """)
        except:
            chart_order.error('V·ªõi ƒëi·ªÅu ki·ªán l·ªçc tr√™n, kh√¥ng c√≥ d·ªØ li·ªáu n√†o th·ªèa m√£n')

        # ----------------------------------------------------------------------------------------------
        # 3.2 Th·ªëng k√™ ƒë∆°n h√†ng t·ªìn ƒë·ªçng
        chart_stuck.info(
            f"""
                **Nguy√™n t·∫Øc t√≠nh :red[ƒë∆°n t·ªìn ƒë·ªçng]**     
                üëâ N·ªôi/Ngo·∫°i Th√†nh T·ªânh, N·ªôi/Ngo·∫°i Th√†nh Tp.HCM - HN, N·ªôi Mi·ªÅn: :red[**60h**]  
                üëâ N·ªôi Mi·ªÅn Tp.HCM - HN: :red[**36h**]  
                üëâ C·∫≠n Mi·ªÅn, Li√™n Mi·ªÅn Tp.HCM - HN, Li√™n Mi·ªÅn ƒê·∫∑c Bi·ªát: :red[**84h**]  
                üëâ C√°ch Mi·ªÅn: :red[**120h**]    
                üëâ Fill :red[**last_delivering_at**] b·∫±ng gi√° tr·ªã :red[**l·ªõn nh·∫•t**] trong t·∫≠p d·ªØ li·ªáu  
                üëâ **:red[Th·ªùi gian t·ªìn ƒë·ªçng] = :red[last_delivering_at] - :red[picked_at]**
            """
        )

        ton_dong_df = st_get_don_ton_dong(run_date_str)
        opt_stuck_receiver_province, opt_stuck_receiver_district = chart_stuck.columns(2)

        opt_stuck_receiver_province.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë Nh·∫≠n**]",
            options=sorted(ton_dong_df['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='stuck_receiver_province',
        )
        filter_ton_dong_df1 = ton_dong_df.loc[
            ton_dong_df['receiver_province'] == st.session_state['stuck_receiver_province']
            ]
        opt_stuck_receiver_district.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán Nh·∫≠n**]",
            options=sorted(filter_ton_dong_df1['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='stuck_receiver_district',
        )
        filter_ton_dong_df2 = filter_ton_dong_df1.loc[
            filter_ton_dong_df1['receiver_district'] == st.session_state['stuck_receiver_district']
            ]
        chart_stuck.selectbox(
            ":blue[**Ch·ªçn H√¨nh Th·ª©c V·∫≠n Chuy·ªÉn (order_type)**]",
            options=sorted(filter_ton_dong_df2['order_type'].unique().tolist(), key=vietnamese_sort_key),
            key='stuck_order_type',
        )
        filter_ton_dong_df3 = filter_ton_dong_df2.loc[
            filter_ton_dong_df2['order_type'] == st.session_state['stuck_order_type']
            ]

        fig_stuck_order = px.pie(filter_ton_dong_df3, values='n_order_late', names='carrier')
        fig_stuck_order.update_traces(textposition='inside', textinfo='label+value')
        fig_stuck_order.update_layout(showlegend=False)
        chart_stuck.plotly_chart(fig_stuck_order)
        chart_stuck.info(f"""
            T·ªïng s·ªë ƒë∆°n t·ªìn ƒë·ªçng: :red[**{filter_ton_dong_df3['n_order_late'].sum()}**]  
        """)

        # ----------------------------------------------------------------------------------------------
        div_5_6, div_1_6 = st.columns([5, 1])
        with div_5_6.expander(":blue[**Show chi ti·∫øt data theo ƒëi·ªÅu ki·ªán l·ªçc**]"):
            st.dataframe(
                filter_order_df8[[
                    'created_at', 'order_code', 'carrier', 'weight', 'carrier_status',
                    'picked_at', 'last_delivering_at', 'carrier_delivered_at'
                ]],
                hide_index=True,
                use_container_width=True
            )
        with div_1_6:
            save_excel(filter_order_df8, key='filter_order')

        st.info(
            f"""
            **:red[Th·ªùi gian giao h√†ng estimate] :blue[·ªü API ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n:]**     
            üëâ Ch·ªâ l·∫•y :red[*ƒë∆°n th√†nh c√¥ng*]  
            üëâ Ch·ªâ l·∫•y ƒë∆°n c√≥ :red[*created_at*] v√† :red[*carrier_delivered_at*] x√°c ƒë·ªãnh    
            üëâ T√≠nh th·ªëng k√™ theo :red[*t·ªânh/th√†nh ph·ªë nh·∫≠n, qu·∫≠n/huy·ªán nh·∫≠n, nh√† v·∫≠n chuy·ªÉn*] v√† :red[*lo·∫°i v·∫≠n chuy·ªÉn*]  
            üëâ **time(:red[h]) = :red[carrier_delivered_at] - :red[created_at]**   
        """
        )
        st.info(
            f"""
            **:red[T·ªâ l·ªá giao h√†ng th√†nh c√¥ng] :blue[·ªü API ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n:]**  
            üëâ T√≠nh tr√™n t·∫≠p :red[*ƒë∆°n th√†nh c√¥ng + ƒë∆°n ho√†n h√†ng*]  
            üëâ T√≠nh th·ªëng k√™ theo :red[*t·ªânh/th√†nh ph·ªë nh·∫≠n, qu·∫≠n/huy·ªán nh·∫≠n, nh√† v·∫≠n chuy·ªÉn*]  
            üëâ :red[**success_rate = #ƒë∆°n th√†nh c√¥ng/(#ƒë∆°n th√†nh c√¥ng + #ƒë∆°n ho√†n h√†ng)**]   
        """
        )
        success_rate_div1, success_rate_div2, success_rate_div3 = st.columns(3)

        success_rate_div1.selectbox(
            ":blue[**Ch·ªçn T·ªânh/Th√†nh Ph·ªë Nh·∫≠n**]",
            options=sorted(total_order_df['receiver_province'].unique().tolist(), key=vietnamese_sort_key),
            key='success_rate_receiver_province',
        )
        success_rate_div2.selectbox(
            ":blue[**Ch·ªçn Qu·∫≠n/Huy·ªán Nh·∫≠n**]",
            options=sorted(total_order_df.loc[
                (total_order_df['receiver_province'] == st.session_state['success_rate_receiver_province'])
            ]['receiver_district'].unique().tolist(), key=vietnamese_sort_key),
            key='success_rate_receiver_district',
        )
        success_rate_div3.selectbox(
            ":blue[**Ch·ªçn Nh√† V·∫≠n Chuy·ªÉn**]",
            options=sorted(total_order_df.loc[
                (total_order_df['receiver_province'] == st.session_state['success_rate_receiver_province'])
                & (total_order_df['receiver_district'] == st.session_state['success_rate_receiver_district'])
                ]['carrier'].unique().tolist(), key=vietnamese_sort_key),
            key='success_rate_carrier',
        )
        filter_success_rate_total_order_df = total_order_df.loc[
            (total_order_df['receiver_province'] == st.session_state['success_rate_receiver_province'])
            & (total_order_df['receiver_district'] == st.session_state['success_rate_receiver_district'])
            & (total_order_df['carrier'] == st.session_state['success_rate_carrier'])
        ]

        success_df = filter_success_rate_total_order_df.loc[
            filter_success_rate_total_order_df['carrier_status'].isin(THANH_CONG_STATUS)
        ]

        failed_df = filter_success_rate_total_order_df.loc[
            filter_success_rate_total_order_df['carrier_status'].isin(HOAN_HANG_STATUS)
        ]

        delivery_success_rate = ti_le_giao_hang.loc[
            (ti_le_giao_hang['receiver_province'] == st.session_state['success_rate_receiver_province'])
            & (ti_le_giao_hang['receiver_district'] == st.session_state['success_rate_receiver_district'])
            & (ti_le_giao_hang['carrier'] == st.session_state['success_rate_carrier'])
        ]['delivery_success_rate'].tolist()[0]

        # ----------------------------------------------------------------------------------------------
        div_3, _, _ = st.columns(3)
        div_3.info(f"üëâ S·ªë ƒë∆°n :red[**th√†nh c√¥ng**]: :red[**{len(success_df)}**]")
        div_5_6, div_1_6 = st.columns([5, 1])
        with div_5_6.expander(":blue[**Show chi ti·∫øt ƒë∆°n h√†ng**] :red[**giao th√†nh c√¥ng**] :blue[**theo ƒëi·ªÅu ki·ªán l·ªçc**]"):
            st.dataframe(
                success_df[[
                    'created_at', 'order_code', 'carrier', 'weight', 'carrier_status',
                    'picked_at', 'last_delivering_at', 'carrier_delivered_at'
                ]],
                hide_index=True,
                use_container_width=True
            )
        with div_1_6:
            save_excel(success_df, key='success')

        # ----------------------------------------------------------------------------------------------
        div_3, _, _ = st.columns(3)
        div_3.info(f"üëâ S·ªë ƒë∆°n :red[**ho√†n h√†ng**]: :red[**{len(failed_df)}**]")
        div_5_6, div_1_6 = st.columns([5, 1])
        with div_5_6.expander(":blue[**Show chi ti·∫øt ƒë∆°n h√†ng**] :red[**ho√†n h√†ng**] :blue[**theo ƒëi·ªÅu ki·ªán l·ªçc**]"):
            st.dataframe(
                failed_df[[
                    'created_at', 'order_code', 'carrier', 'weight', 'carrier_status',
                    'picked_at', 'last_delivering_at', 'carrier_delivered_at'
                ]],
                hide_index=True,
                use_container_width=True
            )
        with div_1_6:
            save_excel(failed_df, key='failed')
        # ----------------------------------------------------------------------------------------------
        div_3, _, _ = st.columns(3)
        # try:
        #     div_3.info(f"üëâ :red[**T·ªâ l·ªá giao th√†nh c√¥ng**]: :red[**{round(len(success_df)/(len(success_df) + len(failed_df))*100, 2)}%**]")
        # except:
        #     div_3.warning(f"üëâ :red[**T·ªïng s·ªë ƒë∆°n giao**]: :red[**{len(success_df) + len(failed_df)}%**]")

        if (len(success_df) + len(failed_df)) == 0:
            div_3.warning(f"üëâ :red[**T·ªïng s·ªë ƒë∆°n giao**]: :red[**{len(success_df) + len(failed_df)}%**]")
        else:
            div_3.info(f"üëâ :red[**T·ªâ l·ªá giao th√†nh c√¥ng**]: :red[**{round(delivery_success_rate * 100, 2)}%**]")
