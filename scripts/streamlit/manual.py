from scripts.output.out_data_api import out_data_api, assign_supership_carrier
from scripts.output.out_data_final import out_data_final, get_data_viz
from scripts.processing.total_processing import total_processing
from scripts.streamlit.streamlit_helper import *
import scripts.streamlit.redirect as rd


def create_manual_tab():

    st.info(
        """
        Page t√≠nh to√°n :red[**manual**] c√°c th√¥ng s·ªë t·ªëi ∆∞u v·∫≠n chuy·ªÉn   
        D·ªØ li·ªáu s·ª≠ d·ª•ng :red[**30 ng√†y**] g·∫ßn nh·∫•t  
        
        **Import ƒë·∫ßy ƒë·ªß c√°c files sau**  
        üìÇ B·∫£ng c∆∞·ªõc ph√≠ (N·∫øu c√≥ update)  
        üìÇ :red[ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng n·ªôi b·ªô nh√† v·∫≠n chuy·ªÉn]    
        üìÇ Th√¥ng tin b∆∞u c·ª•c nh√† v·∫≠n chuy·ªÉn (N·∫øu c√≥ update)    
        üìÇ :red[Th√¥ng tin v√πng ng∆∞ng giao nh·∫≠n]    
        üìÇ Ph√¢n v√πng nh√† v·∫≠n chuy·ªÉn (N·∫øu c√≥ update)    
        """
    )
    # ----------------------------------------------------------------------------------------------

    with st.expander("üìÇ :red[**Files c·∫ßn upload**]"):
        cuoc_phi_file = st.file_uploader(":one: B·∫£ng C∆∞·ªõc Ph√≠", type=['xlsx'])
        if cuoc_phi_file is not None:
            save_uploaded_file(cuoc_phi_file, "input")

        chat_luong_noi_bo_files = st.file_uploader(":two: Ch·∫•t L∆∞·ª£ng N·ªôi B·ªô", type=['xlsx'], accept_multiple_files=True)
        if chat_luong_noi_bo_files is not None:
            for file in chat_luong_noi_bo_files:
                save_uploaded_file(file, "input")

        kho_giao_nhan_files = st.file_uploader(":three: B∆∞u C·ª•c", type=['xlsx'], accept_multiple_files=True)
        if kho_giao_nhan_files is not None:
            for file in kho_giao_nhan_files:
                save_uploaded_file(file, "input")

        ngung_giao_nhan_file = st.file_uploader(":four: Ng∆∞ng giao nh·∫≠n", type=['xlsx'])
        if ngung_giao_nhan_file is not None:
            save_uploaded_file(ngung_giao_nhan_file, "input")

        phan_vung_nvc_file = st.file_uploader(":five: Ph√¢n V√πng Nh√† V·∫≠n Chuy·ªÉn", type=['xlsx'])
        if phan_vung_nvc_file is not None:
            save_uploaded_file(phan_vung_nvc_file, "input")
    # ----------------------------------------------------------------------------------------------

    # 1. Processing d·ªØ li·ªáu
    if 'data_state' not in st.session_state:
        st.session_state['data_state'] = False

    data_button = st.button('X·ª≠ l√Ω d·ªØ li·ªáu', type="primary")

    if data_button and st.session_state['data_state']:
        st.info('ƒê√£ x·ª≠ l√Ω xong d·ªØ li·ªáu')

    if data_button and not st.session_state['data_state']:
        try:
            start_processing = time()
            with st.spinner('ƒêang x·ª≠ l√Ω...'):
                with rd.stdout(format="code"):
                    total_processing(from_api=True)
            stop_processing = time()
            st.info('Th·ªùi gian x·ª≠ l√Ω: ' + convert_time_m_s(stop_processing, start_processing))
            st.session_state['data_state'] = True
        except Exception as e:
            st.error("C√≥ l·ªói x·∫£y ra")
    # ----------------------------------------------------------------------------------------------

    # 2. Xu·∫•t data API
    if 'api_state' not in st.session_state:
        st.session_state['api_state'] = False

    out_data_api_button = st.button('Xu·∫•t data API', type="primary")

    if out_data_api_button and st.session_state['api_state']:
        st.info('ƒê√£ c√≥ k·∫øt qu·∫£ API')

    if out_data_api_button and not st.session_state['api_state']:
        try:
            start = time()
            with st.spinner('ƒêang x·ª≠ l√Ω...'):
                with rd.stdout(format='code'):
                    df_api = out_data_api()
                    assign_supership_carrier(df_api)
            stop = time()
            st.session_state['api_state'] = True
            st.info('Th·ªùi gian x·ª≠ l√Ω: ' + convert_time_m_s(stop, start))
        except Exception as e:
            st.error("C√≥ l·ªói x·∫£y ra")
    # ----------------------------------------------------------------------------------------------

    # 3. Xu·∫•t data API
    if 'viz_state' not in st.session_state:
        st.session_state['viz_state'] = False

    out_data_viz_button = st.button('Xu·∫•t data Viz', type="primary")

    if out_data_viz_button and st.session_state['viz_state']:
        st.info('ƒê√£ c√≥ k·∫øt qu·∫£ Visualization')

    if out_data_viz_button and not st.session_state['viz_state']:
        try:
            start = time()
            with st.spinner('ƒêang x·ª≠ l√Ω...'):
                with rd.stdout(format='code'):
                    target_df = out_data_final()
                    get_data_viz(target_df)
            stop = time()
            st.session_state['viz_state'] = True
            st.info('Th·ªùi gian x·ª≠ l√Ω: ' + convert_time_m_s(stop, start))
        except Exception as e:
            st.error("C√≥ l·ªói x·∫£y ra")
