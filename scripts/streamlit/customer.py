from scripts.streamlit.streamlit_helper import *


def get_order_type_str(target_df, order_type_col='new_type'):
    final_str = 'Ph√¢n lo·∫°i tuy·∫øn  '

    if target_df[order_type_col].nunique() == 1:
        new_type = MAPPING_ID_ORDER_TYPE[int(target_df[order_type_col].values[0])]
        final_str = final_str + f"""\n‚úÖ:red[**{new_type}**]"""
    else:
        for odt_id in target_df[order_type_col].unique():
            tmp_new_type = MAPPING_ID_ORDER_TYPE[int(odt_id)]
            tmp_carrier = ', '.join(target_df.loc[target_df[order_type_col] == odt_id]['carrier'].tolist())
            final_str = final_str + f"""\n‚úÖ:red[**{tmp_new_type}:**] :blue[**{tmp_carrier}**]  """
    return final_str


def handle_submit_form():
    print('Weight inside callback function:', st.session_state['weight'])
    sender_province_code = (
        PROVINCE_MAPPING_DISTRICT_DF.loc[
            PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['sender_province']
            ]['province_code'].values[0]
    )
    sender_district_code = (
        PROVINCE_MAPPING_DISTRICT_DF.loc[
            (PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['sender_province'])
            & (PROVINCE_MAPPING_DISTRICT_DF['district'] == st.session_state['sender_district'])
            ]['district_code'].values[0]
    )
    receiver_province_code = (
        PROVINCE_MAPPING_DISTRICT_DF.loc[
            PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['receiver_province']
            ]['province_code'].values[0]
    )
    receiver_district_code = (
        PROVINCE_MAPPING_DISTRICT_DF.loc[
            (PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['receiver_province'])
            & (PROVINCE_MAPPING_DISTRICT_DF['district'] == st.session_state['receiver_district'])
            ]['district_code'].values[0]
    )
    if st.session_state['pickup'] == 'L·∫•y T·∫≠n N∆°i':
        pickup = '0'
    elif st.session_state['pickup'] == 'G·ª≠i B∆∞u C·ª•c':
        pickup = '1'
    weight = st.session_state['weight']

    # print(sender_province_code, sender_district_code, receiver_province_code, receiver_district_code)

    result_df = get_st_dataframe_from_db(
        sender_province_code, sender_district_code,
        receiver_province_code, receiver_district_code,
        weight, pickup
    )
    # print(result_df.columns)
    st.session_state['submit_result'] = result_df
    st.session_state['is_submitted_at_least_one_time'] = True


def create_customer_tab():
    st.info(
        """
        Page show :red[**k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API**]  
        :red[**Input**]  
        ‚úÖ T·ªânh/Th√†nh Ph·ªë c·ªßa Ng∆∞·ªùi G·ª≠i    
        ‚úÖ Qu·∫≠n/Huy·ªán c·ªßa Ng∆∞·ªùi G·ª≠i    
        ‚úÖ T·ªânh/Th√†nh Ph·ªë c·ªßa Ng∆∞·ªùi Nh·∫≠n    
        ‚úÖ Qu·∫≠n/Huy·ªán c·ªßa Ng∆∞·ªùi Nh·∫≠n    
        ‚úÖ H√¨nh Th·ª©c G·ª≠i H√†ng (:red[**G·ª≠i B∆∞u C·ª•c**] ho·∫∑c :red[**L·∫•y T·∫≠n N∆°i**])     
        ‚úÖ Kh·ªëi L∆∞·ª£ng t√≠nh c∆∞·ªõc (ƒë∆°n v·ªã: :red[**gram**])  
            
        :red[**Output**]  
        üëâ M√£ ph√¢n lo·∫°i tuy·∫øn  
        üëâ Gi√° c∆∞·ªõc giao h√†ng (ƒë∆°n v·ªã: :red[**ƒë·ªìng**])  
        üëâ Tr·∫°ng th√°i tuy·∫øn giao c·ªßa nh√† v·∫≠n chuy·ªÉn  
        üëâ Th·ªùi gian giao d·ª± ki·∫øn  
        üëâ T·ªâ l·ªá giao th√†nh c√¥ng  
        üëâ S·ªë sao trung b√¨nh tuy·∫øn theo ƒë√°nh gi√° ng∆∞·ªùi nh·∫≠n  
        üëâ ƒêi·ªÉm ch·∫•t l∆∞·ª£ng giao h√†ng c·ªßa nh√† v·∫≠n chuy·ªÉn  
        üëâ Ranking nh√† v·∫≠n chuy·ªÉn theo c√°c ti√™u ch√≠ (t·ªët nh·∫•t cho kh√°ch h√†ng, ƒë·ªëi t√°c, c∆∞·ªõc ph√≠ r·∫ª nh·∫•t, t·ªëc ƒë·ªô nhanh nh·∫•t, ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t)
    """
    )
    # ----------------------------------------------------------------------------------------------

    # Form
    with st.container():
        # ----------------------------------------------------------------------------------------------
        sender_province_field, sender_district_field = st.columns(2)
        sender_province_field.selectbox(
            ":blue[**T·ªânh/Th√†nh Ph·ªë c·ªßa Ng∆∞·ªùi G·ª≠i**]",
            options=(PROVINCE_MAPPING_DISTRICT_DF['province'].unique()),
            key='sender_province',
        )
        sender_district_field.selectbox(
            ":blue[**Qu·∫≠n/Huy·ªán c·ªßa Ng∆∞·ªùi G·ª≠i**]",
            options=(
                PROVINCE_MAPPING_DISTRICT_DF.loc[
                    PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['sender_province']]
                ['district'].unique()),
            key='sender_district',
        )
        # ----------------------------------------------------------------------------------------------
        receiver_province_field, receiver_district_field = st.columns(2)
        receiver_province_field.selectbox(
            ":blue[**T·ªânh/Th√†nh Ph·ªë c·ªßa Ng∆∞·ªùi Nh·∫≠n**]",
            options=(PROVINCE_MAPPING_DISTRICT_DF['province'].unique()),
            key='receiver_province',
        )
        receiver_district_field.selectbox(
            ":blue[**Qu·∫≠n/Huy·ªán c·ªßa Ng∆∞·ªùi Nh·∫≠n**]",
            options=(
                PROVINCE_MAPPING_DISTRICT_DF.loc[
                    PROVINCE_MAPPING_DISTRICT_DF['province'] == st.session_state['receiver_province']]
                ['district'].unique()),
            key='receiver_district',
        )
        # ----------------------------------------------------------------------------------------------
        pickup_field, weight_field = st.columns(2)
        pickup_field.selectbox(
            ":blue[**H√¨nh Th·ª©c G·ª≠i H√†ng**]",
            options=('L·∫•y T·∫≠n N∆°i', 'G·ª≠i B∆∞u C·ª•c'),
            key='pickup'
        )
        weight_field.number_input(
            ':blue[**Kh·ªëi l∆∞·ª£ng ƒë∆°n (gram)**: ]',
            key='weight',
            placeholder='Vui l√≤ng nh·∫≠p kh·ªëi l∆∞·ª£ng ƒë∆°n <= 50,000g v√† l·ªõn h∆°n 0g',
            format='%d',
            step=50
        )
        print("Weight after re-run scripts", st.session_state['weight'])

        # --------------------------------------------------------------------------------------------
        st.button(
            "Xem k·∫øt qu·∫£",
            type='primary',
            on_click=handle_submit_form,
        )
    # ------------------------------------------------------------------------------------------------

    # Logic
    if 'is_submitted_at_least_one_time' not in st.session_state:
        st.session_state['is_submitted_at_least_one_time'] = False
    if 'submit_result' not in st.session_state:
        st.session_state['submit_result'] = pd.DataFrame()

    if st.session_state['is_submitted_at_least_one_time']:
        result_df = st.session_state['submit_result']
        result_df['carrier'] = result_df['carrier_id'].map(MAPPING_ID_CARRIER)
        # print(result_df)
        # new_type = MAPPING_ID_ORDER_TYPE[int(result_df['new_type'].values[0])]

        # Table 1
        result_df1 = result_df[[
            'carrier',
            'description',
            'price',
            'time_data',
            'rate',
            'star',
            'score',
            # 'for_shop',
            # 'for_partner',
        ]]

        # Show dataframe of information
        if len(result_df) > 0:
            st.info(f"""{get_order_type_str(result_df)}""")
            st.dataframe(
                result_df1,
                column_config={
                    "carrier": "Nh√† v·∫≠n chuy·ªÉn",
                    'description': "Tr·∫°ng th√°i tuy·∫øn giao",
                    'price': "Ti·ªÅn c∆∞·ªõc",
                    'time_data': "Th·ªùi gian giao d·ª± ki·∫øn",
                    'rate': 'T·ªâ l·ªá giao th√†nh c√¥ng',
                    "star": st.column_config.NumberColumn(
                        "S·ªë sao ƒë√°nh gi√° trung b√¨nh",
                        format="%.1f ‚≠ê",
                    ),
                    "score": "Score ch·∫•t l∆∞·ª£ng giao h√†ng",
                },
                hide_index=True,
            )

            # ranking_by_customer = ' > '.join(result_df.sort_values('for_shop', ascending=True)['carrier'].tolist())
            # ranking_by_partner = ' > '.join(result_df.sort_values('for_partner', ascending=True)['carrier'].tolist())

            st.info(
                f"""
                NVC t·ªët cho :red[**Kh√°ch h√†ng**]    
                :one: :blue[**{', '.join(result_df[result_df['for_shop'] == 1]['carrier'].tolist())}**]  
                :two: :blue[**{', '.join(result_df[result_df['for_shop'] == 2]['carrier'].tolist())}**]  
                :three: :blue[**{', '.join(result_df[result_df['for_shop'] == 3]['carrier'].tolist())}**]  
                :four: :blue[**{', '.join(result_df[result_df['for_shop'] == 4]['carrier'].tolist())}**]  
                :five: :blue[**{', '.join(result_df[result_df['for_shop'] == 5]['carrier'].tolist())}**]  
                :six: :blue[**{', '.join(result_df[result_df['for_shop'] == 6]['carrier'].tolist())}**]  
                """
            )

            st.info(
                f"""
                NVC t·ªët cho :red[**ƒê·ªëi t√°c**]    
                :one: :blue[**{', '.join(result_df[result_df['for_partner'] == 1]['carrier'].tolist())}**]  
                :two: :blue[**{', '.join(result_df[result_df['for_partner'] == 2]['carrier'].tolist())}**]  
                :three: :blue[**{', '.join(result_df[result_df['for_partner'] == 3]['carrier'].tolist())}**]  
                :four: :blue[**{', '.join(result_df[result_df['for_partner'] == 4]['carrier'].tolist())}**]  
                :five: :blue[**{', '.join(result_df[result_df['for_partner'] == 5]['carrier'].tolist())}**]  
                :six: :blue[**{', '.join(result_df[result_df['for_shop'] == 6]['carrier'].tolist())}**]  
                """
            )

        elif st.session_state['weight'] == 0:
            st.warning('Vui l√≤ng nh·∫≠p kh·ªëi l∆∞·ª£ng ƒë∆°n h√†ng > 0g')
        elif st.session_state['weight'] > 50000:
            st.warning('Vui l√≤ng nh·∫≠p kh·ªëi l∆∞·ª£ng ƒë∆°n h√†ng <= 50000g')
        else:
            st.error('C√≥ l·ªói x·∫£y ra')
